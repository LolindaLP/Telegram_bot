import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import random
import html

TOKEN = "7202020971:AAFiAub1-5gtAWpnVqjDflduDoASNOnm2dI"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
def format_text(text: str) -> str:
    return html.unescape(text)  # –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç &quot; -> ", &amp; -> &, –∏ —Ç. –¥.

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ API
def get_question():
    url = "https://opentdb.com/api.php?amount=1&type=multiple"
    response = requests.get(url).json()
    question_data = response['results'][0]
    
    question = format_text(question_data['question'])  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    correct_answer = format_text(question_data['correct_answer'])  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    incorrect_answers = [format_text(ans) for ans in question_data['incorrect_answers']]  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã

    all_answers = incorrect_answers + [correct_answer]
    random.shuffle(all_answers)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã

    return {
        "question": question,
        "correct_answer": correct_answer,
        "all_answers": all_answers
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
@dp.message(Command("quiz"))
async def quiz(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = get_question()

    question = question_data['question']
    all_answers = question_data['all_answers']
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=answer)] for answer in all_answers],  
        resize_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(f"üéÆ **{question}**", parse_mode="Markdown", reply_markup=keyboard)

    # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    @dp.message()
    async def handle_answer(msg: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if msg.text == question_data['correct_answer']:
            await msg.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())  
        else:
            await msg.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_answer']}", 
                             reply_markup=types.ReplyKeyboardRemove())  

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        await msg.answer("–ù–∞–ø–∏—à–∏ /quiz –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())