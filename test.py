import asyncio
import requests
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import random
import html

TOKEN = "7202020971:AAFiAub1-5gtAWpnVqjDflduDoASNOnm2dI"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_questions = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
def format_text(text: str) -> str:
    return html.unescape(text).strip().lower()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ API
def get_question():
    url = "https://opentdb.com/api.php?amount=1&type=multiple"
    response = requests.get(url).json()
    question_data = response['results'][0]
    
    question = html.unescape(question_data['question'])
    correct_answer = format_text(question_data['correct_answer'])
    incorrect_answers = [format_text(ans) for ans in question_data['incorrect_answers']]
    
    all_answers = incorrect_answers + [correct_answer]
    random.shuffle(all_answers)
    
    return {
        "question": question,
        "correct_answer": correct_answer,
        "all_answers": all_answers
    }

async def update_stats(user_id: int, is_correct: bool):
    user_id = int(user_id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

    async with aiosqlite.connect("quiz_bot.db") as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                total_questions INTEGER DEFAULT 0,
                correct_answers INTEGER DEFAULT 0
            )
        ''')
        await db.commit()

        async with db.execute("SELECT total_questions, correct_answers FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

        if user:
            await db.execute("UPDATE users SET total_questions = total_questions + 1 WHERE user_id = ?", (user_id,))
            if is_correct:
                await db.execute("UPDATE users SET correct_answers = correct_answers + 1 WHERE user_id = ?", (user_id,))
        else:
            await db.execute("INSERT INTO users (user_id, total_questions, correct_answers) VALUES (?, 1, ?)", (user_id, int(is_correct)))

        await db.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ /stats, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    user_id = int(message.from_user.id)

    async with aiosqlite.connect("quiz_bot.db") as db:
        async with db.execute("SELECT total_questions, correct_answers FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    print(f"DEBUG: user_id={user_id}, user_data={user}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    if user:
        total, correct = user
        await message.answer(f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}")
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
@dp.message(Command("quiz"))
async def quiz(message: types.Message):
    user_id = message.from_user.id
    question_data = get_question()
    user_questions[user_id] = question_data['correct_answer']
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=answer)] for answer in question_data['all_answers']],  
        resize_keyboard=True
    )
    
    await message.answer(f"üéÆ **{question_data['question']}**", parse_mode="Markdown", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message()
async def handle_answer(message: types.Message):
    if message.text.startswith("/"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    user_id = message.from_user.id
    user_answer = format_text(message.text).strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    if user_id in user_questions:
        correct_answer = format_text(user_questions.pop(user_id)).strip().lower()
        is_correct = user_answer == correct_answer

        await update_stats(user_id, is_correct)

        if is_correct:
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", reply_markup=types.ReplyKeyboardRemove())

        await message.answer("–ù–∞–ø–∏—à–∏ /quiz –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
    else:
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –Ω–∞–ø–∏—à–∏ /quiz.")






async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())