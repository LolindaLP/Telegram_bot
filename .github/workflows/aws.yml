# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - "test.py" 

env:
  AWS_REGION: eu-central-1                   # set this to your preferred AWS region, e.g. us-west-1
  EC2_HOST: 18.199.222.229          # IP-адрес EC2
  EC2_USER: ec2-user               # Имя пользователя EC2 (обычно ubuntu)
  DEPLOY_DIR: /home/ec2-user     # Папка на EC2, куда заливаем код
  SCRIPT_NAME: "test.py"           # 🔹 Имя скрипта
  LOG_FILE: "test.log"             # 🔹 Лог-файл

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy Telegram Bot
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SSH Key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Export BOT_TOKEN to remote server
      run: |
        echo "export BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> ~/.bashrc

    - name: Copy "test.py".py to EC2
      run: |
        scp -i key.pem -o StrictHostKeyChecking=no test.py ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.REMOTE_PATH }}


    - name: Restart Telegram Bot
      run: |
        ssh -i key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
        cd ${{ env.REMOTE_PATH }}
        
        PID=$(pgrep -f ${{ env.SCRIPT_NAME }}) && kill $PID || echo "No running process"

        # Запустить новый процесс
        nohup python3 ${{ env.SCRIPT_NAME }} > ${{ env.LOG_FILE }} 2>&1 &
        EOF
